cmake_minimum_required(VERSION 3.10 FATAL_ERROR)
include(FetchContent)
project(xyceplugin)
set(XyceInstDir "${Xyce_BINARY_DIR}")
set(xmldir "${Xyce_SOURCE_DIR}/utils/ADMS")
set(XyceDataDir "${Xyce_SOURCE_DIR}")

#USAGE: cmake -DPLUGIN_NAME=plugin_name -DVA_FILES=one.va\;two.va\;three.va -DDEST_DIR=~/
set(VA_FILES CACHE STRING "")
set(PLUGIN_NAME CACHE STRING "")
set(DEST_DIR CACHE STRING "")
set(MODULES STRING "")
option(CLEANUP ON)

if(NOT DEST_DIR OR NOT VA_FILES)
  message(FATAL_ERROR "USAGE: buildxyceplugin [options] <veriloginputfile>* destinationdirectory\n
  One or more verilog files must be given.\n The last argument must be a directory name.\n
  Options:\n\t-o <name>:  Name for the plugin.\n\t\tIf not given, the name will be Xyce_Plugin_<module>\n
  \t\twhere <module> is taken from the last verilog input file\n\t
  -d:         Do not clean up temporary C++ files (for debugging)")
endif()

message("buildxyceplugin is building a plugin from the Verilog-A files: ${VA_FILES}")
if(PLUGIN_NAME)
  message("The plugin name will be ${PLUGIN_NAME}.so")
else()
  message("No plugin name provided. Plugin name will be generated by last module.")
endif()

foreach(file IN LISTS VA_FILES)
  get_filename_component(MOD_NAME ${file} NAME_WE)
  message(STATUS "Building C++ for Verilog-A input file ${file}...")
  add_custom_command(OUTPUT N_DEV_ADMS${MOD_NAME}.C COMMAND admsXml -e ${xmldir}/xyceVersion_nosac.xml
  -e ${xmldir}/xyceBasicTemplates_nosac.xml -e ${xmldir}/xyceAnalogFunction_nosac.xml
  -e ${xmldir}/xyceHeaderFile_nosac.xml -e ${xmldir}/xyceImplementationFile_nosac.xml ${file})
  add_custom_target(run ALL DEPENDS N_DEV_ADMS${MOD_NAME}.C)
  message(STATUS "Input file ${file} provides module ${MOD_NAME}")
  message(STATUS "Compiling C++ for ${MOD_NAME}...")
  add_library(${MOD_NAME} SHARED N_DEV_ADMS${MOD_NAME}.C)
  set(MODULES "${MODULES} ${MOD_NAME}")
endforeach()

#these messages are taken directly from 'buildxyceplugin'
message(STATUS "Processing of Verilog-A input files complete.")
message(STATUS "Building bootstrap C++ for plugin ${PLUGIN_NAME}")

#TO DO: translate bootsrap plugin code gen from buildxyceplugin

message(STATUS "Linking into shared library...")
add_library(${PLUGIN_NAME} ${PLUGIN_NAME}.C)
foreach(MOD IN LISTS MODULES)
  #link into plugin library
  target_link_libraries(${PLUGIN_NAME} PUBLIC ${MOD})
endif()
message(STATUS "Done!  Your plugin may now be used by running Xyce with the option '-plugin ${DEST_DIR}/${PLUGIN_NAME}.so'")
